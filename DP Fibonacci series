dp solution using memoization, TC -> o(n) & SC -> O(n)+O(n)

static int f(int n, int[]dp){
		if(n<=1) return n;
		if(dp[n]!=-1) return dp[n];
		return dp[n]=f(n-1,dp) + f(n-2,dp);
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n= sc.nextInt();
		int [] dp =new int[n+1];
		Arrays.fill(dp, -1);
		System.out.println(f(n, dp));

-----------------------------------------------------------------------------------
dp solution using tabulation space optimization, TC -> O(n), SC -> O(1)

public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n= sc.nextInt();
		int prev2=0;
		int prev=1;
		for(int i=2;i<=n;i++){
			int curri = prev+prev2;
			prev2 = prev;
			prev=curri;
		}
		System.out.println(prev);
-------------------------------------------------------------------------------
