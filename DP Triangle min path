-------------------------- recursive approach poor TC complexity -> O(2^n) and SC -> O(n)----------------
    static int f(int i, int j, int n, int[][] traingle){
        if(i==n-1) return traingle[n-1][j];
        int down = traingle[i][j] + f(i+1,j,n,traingle);
        int diagonl = traingle[i][j] + f(i+1,j+1,n,traingle);
        return Math.min(down, diagonl);
    }
    public static int minimumPathSum(int[][] triangle, int n) {
        return f(0,0,n,triangle);
    }

--------------------------------memoization method ---- with TC -> O(n*n)  and SC -> O(n*n) +(path length)

      static int f(int i, int j, int n, int[][] traingle,int[][] dp){
        if(i==n-1) return traingle[n-1][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int down = traingle[i][j] + f(i+1,j,n,traingle,dp);
        int diagonl = traingle[i][j] + f(i+1,j+1,n,traingle,dp);
        return dp[i][j]=Math.min(down, diagonl);
    }
    public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp = new int[n][n];
        for(int[] row : dp) Arrays.fill(row, -1);
        return f(0,0,n,triangle,dp);
    }

--------------------------Tabulation method --- with TC -> O(n*n) and SC -> O(n*n)-----------
      public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp = new int[n][n];
        for(int j=0; j<n;j++) dp[n-1][j]=triangle[n-1][j];
        for(int i=n-2;i>=0;i--){
            for(int j=i; j>=0;j--){
                int down = triangle[i][j] + dp[i+1][j];
                int diagonl = triangle[i][j] + dp[i+1][j+1];
                dp[i][j]= Math.min(down, diagonl);
            }
        }
        return dp[0][0];
    }

-------------------------------------------Space Optimization method -- Tc -> O(n*n) and SC -> O(n)------
    public static int minimumPathSum(int[][] triangle, int n) {
        int[] front = new int[n];
        for(int j=0; j<n;j++) front[j]=triangle[n-1][j];
        for(int i=n-2;i>=0;i--){
            int[] cur = new int[n];
            for(int j=i; j>=0;j--){
                int down = triangle[i][j] + front[j];
                int diagonl = triangle[i][j] + front[j+1];
                cur[j]= Math.min(down, diagonl);
            }
            front=cur;
        }
        return front[0];
    }
