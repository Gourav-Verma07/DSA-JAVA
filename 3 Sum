Optimal approach with TC -> O(nlogn)+(n*n)   and SC - O(no. of unique elements).
2 pointer approach
public static List< List < Integer > > triplet(int n, int []arr) {
        Arrays.sort(arr);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i=0; i<n;i++){
            int j=i+1;
            int k=n-1;
            if(i>0 && arr[i]==arr[i-1]) continue;
            while(j<k){
                int sum = arr[i]+arr[j]+arr[k];
                if(sum>0) k--;
                else if(sum<0) j++;
                else{
                    List<Integer> temp = Arrays.asList(arr[i],arr[j],arr[k]);
                    ans.add(temp);
                    j++;
                    k--;
                    while(j<k && arr[j]==arr[j-1]) j++;
                    while(j<k && arr[k]==arr[k+1])k--;
                }
            }
        }
        return ans;
    }
