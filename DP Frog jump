Memoization solution with TC - O(n) SC -> O(n) + O(n)--------
static int f(int n, int heights[], int[] dp){
        if(n==0) return 0;
        if(dp[n]!=-1) return dp[n];
        int left = f(n-1, heights, dp) + Math.abs(heights[n]-heights[n-1]);
        int right = Integer.MAX_VALUE;
        if(n>1) right = f(n-2, heights,dp) + Math.abs(heights[n]-heights[n-2]);
        return dp[n]=Math.min(left, right);
    }
    public static int frogJump(int n, int heights[]) {
        int[] dp = new int[n+1];
        Arrays.fill(dp, -1);
        return f(n-1, heights,dp);
        // Write your code here..
    }

---------------- Tabulation solution with TC -> o(n) SC-> O(n)--------------
public static int frogJump(int n, int heights[]){
        int[] dp= new int[n];
        dp[0]=0;
        Arrays.fill(dp, 0);
        for(int i=1; i<n;i++){
            int fs = dp[i-1] + Math.abs(heights[i]-heights[i-1]);
            int ss = Integer.MAX_VALUE;
            if(i>1) ss = dp[i-2] + Math.abs(heights[i]-heights[i-2]);
            dp[i] = Math.min(fs,ss);
        }
        return dp[n-1];
    }

--------------------------space optimization with TC -> O(n)   SC-> O(1)-------

public static int frogJump(int n, int heights[]){
        int prev=0, prev2=0;
        for(int i=1; i<n;i++){
            int fs= prev + Math.abs(heights[i]-heights[i-1]);
            int ss = Integer.MAX_VALUE;
            if(i>1) ss = prev2 + Math.abs(heights[i]-heights[i-2]);
            int cur = Math.min(fs,ss);
            prev2=prev;
            prev = cur;
        }
        return prev;
    }
