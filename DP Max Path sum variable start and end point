----------------------- recursive solution with TC -> O(3^n)  and SC -> O(n)-----------------
  static int f(int i, int j, int[][] matrix){
		if(j<0 || j>=matrix[0].length) return (int)(-1e8);
		if(i==0) return matrix[0][j];
		int up = matrix[i][j] + f(i-1, j, matrix);
		int left = matrix[i][j] + f(i-1, j-1, matrix);
		int right = matrix[i][j] + f(i-1, j+1, matrix);
		return Math.max(up, Math.max(left, right));
	}
	public static int getMaxPathSum(int[][] matrix) {
		// Write your code here
		int n= matrix.length;
		int m= matrix[0].length;
		int maxi = (int)(-1e8);
		for(int j=0; j<m;j++){
			maxi = Math.max(maxi, f(n-1, j, matrix));
		}
		return maxi;
	}

---------------------------------memoization solution-with TC -> O(n*m) and SC -> O(n*m -> for matrix) + O(recursive stack(n)space)-----------
	  static int f(int i, int j, int[][] matrix , int[][] dp){
		if(j<0 || j>=matrix[0].length) return (int)(-1e8);
		if(i==0) return matrix[0][j];
		if(dp[i][j]!=-1) return dp[i][j];
		int up = matrix[i][j] + f(i-1, j, matrix, dp);
		int left = matrix[i][j] + f(i-1, j-1, matrix, dp);
		int right = matrix[i][j] +  f(i-1, j+1, matrix, dp);
		return dp[i][j]=Math.max(up, Math.max(left, right));
	}
	public static int getMaxPathSum(int[][] matrix) {
		// Write your code here
		int n= matrix.length;
		int m= matrix[0].length;
		int[][] dp = new int[n][m];
		for(int[] row : dp) Arrays.fill(row, -1);
		int maxi = (int)(-1e8);
		for(int j=0; j<m;j++){
			maxi = Math.max(maxi, f(n-1, j, matrix, dp));
		}
		return maxi;
	}

--------------------------Tabulation solution  with TC -> O(n*m) + O(m) and SC -> O(n*m)---------------
	  public static int getMaxPathSum(int[][] matrix) {
		// Write your code here
		int n= matrix.length;
		int m= matrix[0].length;
		int[][] dp = new int[n][m];
		int maxi = (int)(-1e8);
		for(int j=0; j<m;j++) dp[0][j]= matrix[0][j];
		for(int i=1; i<n;i++){
			for(int j=0; j<m;j++){
				int left=matrix[i][j], right=matrix[i][j];
				int up = matrix[i][j] + dp[i-1][j];
		        if(j-1>=0) left += dp[i-1][j-1];
				else left+=(int)-1e8;
		        if(j+1<m) right += dp[i-1][j+1];
				else right+= (int)-1e8;
				dp[i][j]=Math.max(up, Math.max(left, right));
			}
		}
		for(int j=0; j<m;j++){
			maxi = Math.max(maxi, dp[n-1][j]);
		}
		return maxi;
	}

-------------------------Space optimized with TC -> O(n*m) and SC -> O(n)------------
	public static int getMaxPathSum(int[][] matrix) {
		// Write your code here
		int n= matrix.length;
		int m= matrix[0].length;
		int[] prev = new int[m];
		int maxi = (int)(-1e8);
		for(int j=0; j<m;j++) prev[j]= matrix[0][j];
		for(int i=1; i<n;i++){
			int[] cur = new int[m];
			for(int j=0; j<m;j++){
				int left=matrix[i][j], right=matrix[i][j];
				int up = matrix[i][j] + prev[j];
		        if(j-1>=0) left += prev[j-1];
				else left+=(int)(-1e8);
		        if(j+1<m) right += prev[j+1];
				else right+= (int)(-1e8);
				cur[j]=Math.max(up, Math.max(left, right));
			}
			prev=cur;
		}
		for(int j=0; j<m;j++){
			maxi = Math.max(maxi, prev[j]);
		}
		return maxi;
	}
