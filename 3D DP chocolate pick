-------------------- recursive solution with poor TC -> O(3^n * 3^n)  and SC -> O(n)--------------------- 
  public static int maximumChocolates(int r, int c, int[][] grid) {
		// Write your code here.
		return f(0,0,c-1,r,c,grid);
	}
	static int f(int i, int j1, int j2, int r, int c, int[][] grid){
		if(j1<0 || j2<0 || j1>=c || j2>=c) return (int)-1e8;
		if(i==r-1){
			if(j1==j2) return grid[i][j1];
			else return grid[i][j1]+grid[i][j2];
		}
		int maxi = (int)-1e8;
		for(int dj1=-1;dj1<=+1;dj1++){
			for(int dj2=-1;dj2<=+1;dj2++){
				int value=0;
				if(j1==j2) value = grid[i][j1];
				else value = grid[i][j1]+grid[i][j2];
				value+=f(i+1, j1+dj1, j2+dj2, r, c,grid);
				maxi = Math.max(maxi, value);
			}
		}
		return maxi;
	}

--------------------------memoization solution with TC -> O(N*M*M)*9 and SC -> O(N*M*M) + O(N)--------------
	  public static int maximumChocolates(int r, int c, int[][] grid) {
		// Write your code here.
		int[][][] dp= new int[r][c][c];
		for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                Arrays.fill(dp[i][j], -1);
            }
		}
		return f(0,0,c-1,r,c,grid,dp);
	}

	static int f(int i, int j1, int j2, int r, int c, int[][] grid, int[][][] dp){
		if(j1<0 || j2<0 || j1>=c || j2>=c) return (int)-1e8;
		if(i==r-1){
			if(j1==j2) return grid[i][j1];
			else return grid[i][j1]+grid[i][j2];
		}
		if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
		int maxi = (int)-1e8;
		for(int dj1=-1;dj1<=+1;dj1++){
			for(int dj2=-1;dj2<=+1;dj2++){
				int value=0;
				if(j1==j2) value = grid[i][j1];
				else value = grid[i][j1]+grid[i][j2];
				value+=f(i+1, j1+dj1, j2+dj2, r, c,grid,dp);
				maxi = Math.max(maxi, value);
			}
		}
		return dp[i][j1][j2]=maxi;
	}

--------------------------Tabulation solution ----with TC -O(N*M*N)+9 and SC -> O(N*M*M)-------------
	public static int maximumChocolates(int r, int c, int[][] grid) {
		// Write your code here.
		int[][][] dp= new int[r][c][c];
		for(int j1=0; j1<c;j1++){
			for(int j2=0; j2<c;j2++){
				if(j1==j2) dp[r-1][j1][j2]= grid[r-1][j1];
				else dp[r-1][j1][j2] = grid[r-1][j1]+grid[r-1][j2];
			}
		}
		for(int i=r-2;i>=0;i--){
			for(int j1=0; j1<c;j1++){
				for(int j2=0; j2<c;j2++){
					int maxi = (int)-1e8;
		            for(int dj1=-1;dj1<=+1;dj1++){
			            for(int dj2=-1;dj2<=+1;dj2++){
				            int value=0;
				            if(j1==j2) value = grid[i][j1];
				            else value = grid[i][j1]+grid[i][j2];
							if(j1+dj1>=0 && j2+dj2>=0 && j1+dj1<c && j2+dj2<c){
				                value+=dp[i+1][j1+dj1][j2+dj2];
							}
							else value += (int)-1e8;
				            maxi = Math.max(maxi, value);
			            }
		            }
					dp[i][j1][j2]= maxi;
				}
			}
		}
		return dp[0][0][c-1];
	}

------------------------------------Space optimized we converted 3D DP to 2D DP  -> TC -> O(N*M*M)*9 and sc -> O(N*M) + O(path length)------------
	public static int maximumChocolates(int r, int c, int[][] grid) {
		// Write your code here.
		int[][] front= new int[c][c];
		for(int j1=0; j1<c;j1++){
			for(int j2=0; j2<c;j2++){
				if(j1==j2) front[j1][j2]= grid[r-1][j1];
				else front[j1][j2] = grid[r-1][j1]+grid[r-1][j2];
			}
		}
		for(int i=r-2;i>=0;i--){
			int[][] cur = new int[c][c];
			for(int j1=0; j1<c;j1++){
				for(int j2=0; j2<c;j2++){
					int maxi = (int)-1e8;
		            for(int dj1=-1;dj1<=+1;dj1++){
			            for(int dj2=-1;dj2<=+1;dj2++){
				            int value=0;
				            if(j1==j2) value = grid[i][j1];
				            else value = grid[i][j1]+grid[i][j2];
							if(j1+dj1>=0 && j2+dj2>=0 && j1+dj1<c && j2+dj2<c){
				                value+=front[j1+dj1][j2+dj2];
							}
							else value += (int)-1e8;
				            maxi = Math.max(maxi, value);
			            }
		            }
					cur[j1][j2]= maxi;
				}
			}
			front = cur;
		}
		return front[0][c-1];
	}
