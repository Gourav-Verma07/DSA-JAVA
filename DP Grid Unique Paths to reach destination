
  public static int uniquePaths(int m, int n) {
		// Write your code here.
		int totalDirections= m+n-2;
        int rightmoves= n-1;
        double result= 1;
        for(int i=1;i<=rightmoves;i++) result=result*(totalDirections-rightmoves+i)/i;
        
        return (int)result;
    }

----------------------------------------memoization solution with TC -> O(N*M)  and SC -> O((N-1)+(M-1)) + O(N*M)-----------

      public static int f(int i, int j, int[][] dp){
        if(i==0 && j==0) return 1;
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int up = f(i-1,j,dp);
        int left = f(i,j-1,dp);
        return dp[i][j]= up+left;
    }
	public static int uniquePaths(int m, int n) {
        int[][] dp = new int [m][n];
        for(int[] row:dp) Arrays.fill(row, -1);
        return f(m-1,n-1,dp);
    }

----------------------------------------Tabulaton Solution with TC -> O(N*M) and SC -> O(N*M)-----------------
      public static int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for(int i=0; i<m;i++){
            for(int j=0; j<n;j++){
                if(i==0 && j==0)  dp[0][0]=1;
                else{
                    int up=0, left=0;
                    if(i>0)  up= dp[i-1][j];
                    if(j>0)  left= dp[i][j-1];
                    // int up = (i>0) ? dp[i-1][j] : 0;
                    // int left = (j>0)? dp[i][j-1]:0;
                    dp[i][j] = up+left;
                }
            }
        }
        return dp[m-1][n-1];
    }

-----------------------------------Space optimized Solution with TC -> O(N*M) and SC -> O(path.length)----------------
    public static int uniquePaths(int m, int n) {
        int[] prev = new int[m];
        for(int i=0; i<m;i++){
            int[] cur = new int[n];
            for(int j=0; j<n;j++){
                if(i==0 && j==0) cur[j]= 1;
                else{
                    int up=0, left=0;
                    if(i>0)  up= prev[j];
                    if(j>0)  left= cur[j-1];
                    cur[j] = up+left;
                }
            }
            prev=cur;
        }
        return prev[n-1];
    }
