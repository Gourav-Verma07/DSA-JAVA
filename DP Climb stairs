On leetcode space optimization solution with TC -> O(n)  SC -> O(1)
class Solution {
    public int climbStairs(int n) {
        if(n==0 || n==1) return 1;
        int prev=1 , cur = 1;
        for(int i=2;i<=n;i++){
            int temp = cur;
            cur=prev+cur;
            prev = temp;
        }
        return cur;
    }
}
-----------------------------------------On coding ninja memoization -> TC O(n)   SC-> O(n)-------------
public class Solution {
	public static final int MOD = 1000000007;
	public static int countDistinctWayToClimbStair(long nStairs) {
		if(nStairs == 0 || nStairs==1){ return 1;}
		int n = (int)nStairs;
		int[] dp = new int[n+1];
		dp[0] = 1;
		dp[1] = 1;
		int count = countDistinctways(nStairs,dp);
		return count;
	}
	public static int countDistinctways(long n , int [] dp){
		for(int i=2;i<=n;i++){
			dp[i] = dp[i-1]%MOD+dp[i-2]%MOD;
		}
		return dp[dp.length-1]%MOD;
	}
}
